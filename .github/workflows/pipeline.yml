name: CD Pipeline

on:
  workflow_run:
    workflows: ["Docker Image CI"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
      - name: Create .env file
        run: |
          echo "NODE_ENV=production" >> .env
          echo "GOOGLE_CLIENTID=${{ secrets.GOOGLE_CLIENTID }}" >> .env
          echo "GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
          echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env
          echo "KAKAO_CLIENTID=${{ secrets.KAKAO_CLIENTID }}" >> .env
          echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> .env
          echo "KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}" >> .env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
          echo "KAKAOPAY_SECRET=${{ secrets.KAKAOPAY_SECRET }}" >> .env
          echo "WALLET_PRIVATE_KEY=${{ secrets.WALLET_PRIVATE_KEY }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          echo "INFURA_TOKEN=${{ secrets.INFURA_TOKEN }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env

      - name: Debug - Print .env contents
        run: |
          echo "Contents of .env file:"
          cat .env
      
      - name: Debug - Check if .env file exists
        run: |
          if [ -f ".env" ]; then
            echo ".env file exists"
          else
            echo ".env file does not exist"
          fi
      
      - name: Pull Docker image
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ezcryptoexchange:latest

      - name: Delete Old docker container
        run: sudo docker rm -f ezcryptoexchange || true

      - name: Run Docker Container
        run: |
          sudo docker run -d \
            -p 3001:3001 \
            --name ezcryptoexchange \
            --env-file .env \
            ${{ secrets.DOCKERHUB_USERNAME }}/ezcryptoexchange

      - name: Debug - Check container logs
        run: sudo docker logs ezcryptoexchange

      - name: Debug - Print container environment variables
        run: sudo docker exec ezcryptoexchange env

      - name: Debug - Check if application can access environment variables
        run: |
          sudo docker exec ezcryptoexchange node -e "console.log('MYSQL_HOST:', process.env.MYSQL_HOST)"
          sudo docker exec ezcryptoexchange node -e "console.log('NODE_ENV:', process.env.NODE_ENV)"